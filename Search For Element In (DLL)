class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.prev = None

class doublyLL:
    def __init__(self):
        self.head = None
    
    
    def print_LL(self):
        if self.head is None:
            print("The list is empty")
            return
        else:
            n = self.head
            while n is not None:
                print(n.data,"-->",end='')
                n = n.next
    
    def add_begin(self,data):
      new_node=Node(data)
      if self.head is None:
        self.head=new_node
      else:
        new_node.next=self.head
        self.head.prev=new_node
        self.head=new_node

    def search(self, val):
      i = 1;
      flag_val = False
      curr = self.head
      if(self.head == None):
         print("List is empty")
         return
      while(curr != None):
         if(curr.data == val):
            flag_val = True
            break
         curr = curr.next
         i = i + 1
      if(flag_val):
         print("The node is present in the list")
      else:
         print("The node is not present in the list")


LL1 = doublyLL()
LL1.add_begin(20)
LL1.add_begin(30)
LL1.add_begin(40)
LL1.add_begin(50)
LL1.print_LL()
print()
ele=int(input('Enter number to be searched in the list '))
LL1.search(ele)
