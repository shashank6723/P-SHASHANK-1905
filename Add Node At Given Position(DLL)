class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.prev = None

class doublyLL:
    def __init__(self):
        self.head = None
    
    
    def print_LL(self):
        if self.head is None:
            print("The list is empty")
            return
        else:
            n = self.head
            while n is not None:
                print(n.data,"-->",end='')
                n = n.next

    def add_begin(self,data):
      new_node=Node(data)
      if self.head is None:
        self.head=new_node
      else:
        new_node.next=self.head
        self.head.prev=new_node
        self.head=new_node

    def add_after(self,data,x):
      if self.head is None:
        print('LL is empty')
      else:
        n=self.head
        while n is not None:
          if x==n.data:
            break
          n=n.next
        if n is None:
          print('Given node not present in the DLL')
        else:
          new_node=Node(data)
          new_node.next=n.next
          new_node.prev=n
          if n.next is not None:
            n.next.prev=new_node
            n.next=new_node

    def add_before(self,data,x):
      if self.head is None:
        print('LL is empty')
      else:
        n=self.head
        while n is not None:
          if x==n.data:
            break
          n=n.next
        if n is None:
          print('Given node not present in the DLL')
        else:
          new_node=Node(data)
          new_node.next=n
          new_node.prev=n.prev
          if n.prev is not None:
            n.prev.next=new_node
          else:
            self.head=new_node
          n.prev=new_node

LL1 = doublyLL()
LL1.add_begin(5)
LL1.add_begin(1)
LL1.add_before(0,1)
LL1.add_before(4,5)
LL1.add_after(10,1)
LL1.add_after(12,4)
LL1.print_LL()
