class Node:
    def __init__(self, data):
        self.data = data
        self.next = 0
 
class CircularLinkedList:
    def __init__(self):
        self.last = None

    def addToEmpty(self, data):
        if (self.last != None):
            return self.last
        temp = Node(data)
        self.last = temp
        self.last.next = self.last
        return self.last
 
    def addBegin(self, data):
        if (self.last == None):
            return self.addToEmpty(data)
        temp = Node(data)
        temp.next = self.last.next
        self.last.next = temp
        return self.last

    def addEnd(self, data):
        if (self.last == None):
            return self.addToEmpty(data)
        temp = Node(data)
        temp.next = self.last.next
        self.last.next = temp
        self.last = temp
        return self.last

    def traverse(self):
      if (self.last == None):
        print("List is empty")
        return
      temp = self.last.next
      while temp:
        print(temp.data,"-->", end=" ")
        temp = temp.next
        if temp == self.last.next:
          break

llist = CircularLinkedList()
last = llist.addToEmpty(6)
last = llist.addBegin(4)
last = llist.addBegin(2)
last = llist.addEnd(2)
last = llist.addEnd(9)
last = llist.addEnd(12)
llist.traverse()
